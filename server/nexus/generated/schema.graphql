### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
Объект ответа мутации пользователя
"""
type AuthPayload {
  data: User
  errors: [RequestError!]!
  message: String
  success: Boolean!
  token: String
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumLetterStatusFilter {
  equals: LetterStatus
  in: [LetterStatus!]
  not: NestedEnumLetterStatusFilter
  notIn: [LetterStatus!]
}

"""
Файл
"""
type File {
  """
  Когда создан
  """
  createdAt: DateTime!

  """
  Кодировка
  """
  encoding: String!

  """
  Имя файла
  """
  filename: String!
  id: String!

  """
  Миме-тип
  """
  mimetype: String!

  """
  Пользовательское имя файла
  """
  name: String

  """
  Путь к файлу
  """
  path: String!

  """
  Очередность
  """
  rank: Int!

  """
  Размер в байтах
  """
  size: Float!

  """
  Когда обновлен
  """
  updatedAt: DateTime!
}

input FileListRelationFilter {
  every: FileWhereInput
  none: FileWhereInput
  some: FileWhereInput
}

input FileOrderByInput {
  createdAt: SortOrder
  createdById: SortOrder
  encoding: SortOrder
  filename: SortOrder
  id: SortOrder
  mimetype: SortOrder
  name: SortOrder
  path: SortOrder
  rank: SortOrder
  size: SortOrder
  updatedAt: SortOrder
}

input FileWhereInput {
  AND: [FileWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [FileWhereInput!]
  OR: [FileWhereInput!]
  createdAt: DateTimeFilter
  createdById: StringNullableFilter
  encoding: StringFilter
  filename: StringFilter
  id: StringFilter
  mimetype: StringFilter
  name: StringNullableFilter
  path: StringFilter
  rank: IntFilter
  size: FloatFilter
  updatedAt: DateTimeFilter
}

input FileWhereUniqueInput {
  id: String
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

scalar JSON

input LetterListRelationFilter {
  every: LetterWhereInput
  none: LetterWhereInput
  some: LetterWhereInput
}

enum LetterStatus {
  Created
  Error
  Processing
  Sended
}

input LetterWhereInput {
  AND: [LetterWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [LetterWhereInput!]
  OR: [LetterWhereInput!]
  createdAt: DateTimeFilter
  createdById: StringNullableFilter
  deleteOnSend: BoolFilter
  email: StringFilter
  errorMessage: StringNullableFilter
  id: StringFilter
  message: StringFilter
  rank: IntNullableFilter
  replyTo: StringNullableFilter
  returnTo: StringNullableFilter
  status: EnumLetterStatusFilter
  subject: StringFilter
  updatedAt: DateTimeFilter
}

type Mutation {
  createResetPasswordProcessor(
    where: UserWhereUniqueInput!
  ): ResetPasswordResponse!
  resetPasswordProcessor(where: ResetPasswordProcessorWhereInput!): AuthPayload!

  """
  Авторизация
  """
  signin(data: UserSigninDataInput!, where: UserWhereUniqueInput!): AuthPayload!

  """
  Регистрация
  """
  signup(data: UserSignupDataInput!): AuthPayload!

  """
  Загрузка файла
  """
  singleUpload(
    data: SingleUploadInput

    """
    Устаревший параметр
    """
    file: Upload
  ): File
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumLetterStatusFilter {
  equals: LetterStatus
  in: [LetterStatus!]
  not: NestedEnumLetterStatusFilter
  notIn: [LetterStatus!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  """
  Файл
  """
  file(where: FileWhereUniqueInput!): File

  """
  Список файлов
  """
  files(
    cursor: FileWhereUniqueInput
    orderBy: [FileOrderByInput!]
    skip: Int
    take: Int
    where: FileWhereInput
  ): [File!]!

  """
  Количество файлов
  """
  filesCount(where: FileWhereInput): Int!
  me: User
  tests: [Int!]!

  """
  Пользователь
  """
  user(where: UserWhereUniqueInput!): User

  """
  Список пользователей
  """
  users(
    cursor: UserWhereUniqueInput
    orderBy: [UserOrderByInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): [User!]!

  """
  Количество пользователей
  """
  usersCount(where: UserWhereInput): Int!
}

"""
Объект ошибки
"""
type RequestError {
  key: String!
  message: String!
}

type ResetPassword {
  foo: String
  id: ID!
}

input ResetPasswordListRelationFilter {
  every: ResetPasswordWhereInput
  none: ResetPasswordWhereInput
  some: ResetPasswordWhereInput
}

input ResetPasswordProcessorWhereInput {
  User: UserWhereUniqueInput!
  code: ID!
}

type ResetPasswordResponse {
  data: ResetPassword
  errors: [RequestError!]!
  message: String!
  success: Boolean!
}

input ResetPasswordWhereInput {
  AND: [ResetPasswordWhereInput!]
  NOT: [ResetPasswordWhereInput!]
  OR: [ResetPasswordWhereInput!]
  User: StringFilter
  User_ResetPasswordToUser: UserWhereInput
  code: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  password: StringFilter
  updatedAt: DateTimeFilter
  validTill: DateTimeNullableFilter
}

input ResetPasswordWhereUniqueInput {
  id: ID
}

input SingleUploadInput {
  """
  В какую директорю загружать файл
  """
  directory: String
  file: Upload!

  """
  Пользовательское имя файла
  """
  name: String
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""
Somde test object
"""
type Test {
  id: ID
}

input TokenListRelationFilter {
  every: TokenWhereInput
  none: TokenWhereInput
  some: TokenWhereInput
}

input TokenWhereInput {
  AND: [TokenWhereInput!]
  NOT: [TokenWhereInput!]
  OR: [TokenWhereInput!]
  User: UserWhereInput
  createdAt: DateTimeFilter
  expiredAt: DateTimeNullableFilter
  id: StringFilter
  userId: StringNullableFilter
}

"""
desc
"""
scalar Upload

"""
Пользователь
"""
type User {
  """
  Когда создан
  """
  createdAt: DateTime!
  email: String
  fullname: String
  id: String!

  """
  Avatar
  """
  image: String

  """
  Показывать емейл другим пользователям
  """
  showEmail: Boolean!

  """
  Показывать ФИО другим пользователям
  """
  showFullname: Boolean!
  sudo: Boolean

  """
  Когда обновлен
  """
  updatedAt: DateTime!
  username: String
}

input UserOrderByInput {
  active: SortOrder
  createdAt: SortOrder
  email: SortOrder
  fullname: SortOrder
  id: SortOrder
  image: SortOrder
  password: SortOrder
  showEmail: SortOrder
  showFullname: SortOrder
  sudo: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserSigninDataInput {
  password: String
}

input UserSignupDataInput {
  email: String
  fullname: String
  password: String

  """
  Показывать емейл другим пользователям
  """
  showEmail: Boolean!

  """
  Показывать ФИО другим пользователям
  """
  showFullname: Boolean!
  username: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  Files: FileListRelationFilter
  Letters: LetterListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  ResetPasswords: ResetPasswordListRelationFilter
  Tokens: TokenListRelationFilter
  active: BoolFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  fullname: StringNullableFilter
  id: StringFilter
  image: StringNullableFilter
  password: StringNullableFilter
  showEmail: BoolFilter
  showFullname: BoolFilter
  sudo: BoolFilter
  updatedAt: DateTimeFilter
  username: StringNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}
